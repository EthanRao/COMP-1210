import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
/**
 * Compute the value generated by aspecified expression.
 * project 9 (your activity or project number goes here).
 * @Xi Rao
 * @11/09/2018 
 */ 

public class SapphireCardholderTest {


   /** Fixture initialization (common initialization
    *  for all tests). **/
   @Before public void setUp() {
   }
  /** getTest. **/
   @Test public void getTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam");
      sc.addPurchases(34.5, 100.0, 63.50, 350.0);
      sc.setPrevBalance(1200.0);
      sc.setPayment(200); 
      Assert.assertEquals("get Test", "10001", sc.getAcctNumber());
      Assert.assertEquals("get Test", "Smith, Sam", sc.getName());
      Assert.assertEquals("get Test", 1200.0, sc.getPrevBalance(), 0.01);
      Assert.assertEquals("get Test", 200, sc.getPayment(), 0.01);  
      Assert.assertEquals("get Test", 548.00, sc.totalPurchases(), 0.01);
      Assert.assertEquals("get Test", 4, sc.getPurchases().length);    
   } 
  /** setTest. **/
   @Test public void setTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam"); 
      sc.setName("Jones, Pat");
      sc.setAcctNumber("10002");
      double[] r = {100.0, 200.0, 300, 400.01};
      sc.setPurchases(r);
      Assert.assertEquals("set Test", "Jones, Pat", sc.getName());
      Assert.assertEquals("set Test", "10002", sc.getAcctNumber());  
      Assert.assertEquals("set Test", 10000.01, sc.totalPurchases(), 0.01);
   }
      
/** firstdeletePurchasesTest. **/
   @Test public void firstdeletePurchasesTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam"); 
      sc.addPurchases(34.5, 100.0, 63.50, 350.0);
      sc.rdeletePurchases(63.50);
      Assert.assertEquals("singledeletPurchases Test",
         484.5, sc.totalPurchases(), 0.01);      
   } 
   /**  deletePurchases. **/
   @Test public void deletePurchases() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam");
      sc.addPurchases(34.5, 100.0, 63.50, 350.0);
      sc.deletePurchases(100.0, 350.0);
      Assert.assertEquals("deletPurchases Test",
         98.0, sc.totalPurchases(), 0.01);
   } 
   /** balanceTest. **/
   @Test public void balanceTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam"); 
      sc.addPurchases(34.5, 100.0, 63.50, 350.0); 
      sc.setPrevBalance(1200.0);
      sc.setPayment(200);
      Assert.assertEquals("balance Test",
         1758.00, sc.balance(), 0.01);
   } 

 /** purchasePointsTest. **/
   @Test public void purchasePointsTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam"); 
      sc.addPurchases(34.5, 100.0, 63.50, 350.0); 
      sc.setPrevBalance(1200.0);
      sc.setPayment(200);
      Assert.assertEquals("purchasePoints Test", 548, sc.purchasePoints());
   }
/**.
   */
   @Test public void compareToTest() {
      SapphireCardholder sc = new SapphireCardholder("10001", "Smith, Sam");
      Cardholder nameIn = new SapphireCardholder("10001", "Smith, Sam");;
       }
}