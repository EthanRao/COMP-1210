import java.util.Arrays;
import java.text.DecimalFormat;  
 /**
 * Compute the value generated by aspecified expression.
 * project 9
 * @author Xi Rao
 * @11/09/2018 
 */
public abstract class Cardholder implements Comparable<Cardholder>
{

   protected String category;
   protected String acctNumber;
   protected String name;
   protected double prevBalance;
   protected double payment;
   protected double[] purchases;
/**
*/   
   public static final double INTEREST_RATE = 0.01;
   /**
    * @param nameIn the name.
    * @param acctNumberIn the acctNumber.
    * 
    */
   public Cardholder(String acctNumberIn, String nameIn)
   {
      name = nameIn;
      acctNumber = acctNumberIn;
      purchases = new double [0];
      category = "Sapphire Cardholder";
   }  
/**
* @param acctNumberIn the acctNumber.
*/
   public void setAcctNumber(String acctNumberIn) {
      acctNumber = acctNumberIn;
   }   
/**
* @return acctNumber.
*/
   public String getAcctNumber() {
      return acctNumber;
   }
/**
* @param nameIn the name.
*/
   public void setName(String nameIn) {
      name = nameIn;
   }   
/**
* @return name.
*/
   public String getName() {
      return name;
   }
/**
* @param prevBalanceIn the prevBalance.
*/
   public void setPrevBalance(double prevBalanceIn) {
      prevBalance = prevBalanceIn;
   }   
/**
* @return prevBalance.
*/
   public double getPrevBalance() {
      return prevBalance;
   }
/**
* @param paymentIn the payment.
*/
   public void setPayment(double paymentIn) {
      payment = paymentIn;
   }   
/**
* @return payment.
*/
   public double getPayment() {
      return payment;
   }
/**
* @param purchasesIn the purchases.
*/  
   
   public void setPurchases(double[] purchasesIn) {
      purchases =  purchasesIn;
   }
/**
* @return purchases.
*/   
   public double[] getPurchases() {
      return  purchases;
   }
/**
* @param purchasesIn the purchases.
*/   
   public void addPurchases(double...purchasesIn) {
      
      for (double r : purchasesIn) {
         purchases = Arrays.copyOf(purchases, purchases.length + 1);
         purchases[purchases.length - 1] += r;
         
      }
   }
/**
* @param purchasesIn the purchases.
*/
   public void rdeletePurchases(double purchasesIn) {
      for (int i = 0; i < purchases.length; i++) {
         if (purchases[i] == purchasesIn) {
            for (int j = i; j < purchases.length - 1; j++) {
               purchases[j] = purchases[j + 1];
            }
            purchases[purchases.length - 1] = 0;
            purchases = Arrays.copyOf(purchases, purchases.length - 1);
         }
      }
   }  
/**
* @param purchasesIn the purchases.
*/   
   public void deletePurchases(double...purchasesIn) {
      for (double r : purchasesIn) {
         rdeletePurchases(r);
      }
   }
/**
* @return interest.
*/  
   public double interest() {
      double interest = (prevBalance - payment) * INTEREST_RATE;
      return interest;
   } 
/**
* @return totalPurchases.
*/  
   public double totalPurchases() {
      double totalPurchases = 0;
      for (double r : purchases) {
         totalPurchases += r;
      }
      
      return totalPurchases;
   } 
/**
* @return balance.
*/  
   public double balance() {
      double balance = prevBalance + interest() + totalPurchases();
      return balance;
   } 
/**
* @return currentBalance.
*/  
   public double currentBalance() {
      double currentBalance = prevBalance  - payment + interest() 
         + totalPurchases();
      return currentBalance;
   } 
/**
* @return minPayment.
*/  
   public double minPayment() {
      double minPayment = currentBalance() * 0.03;
      return minPayment;
   }       
/**
 * @return  output .
 */ 
   public String toString() {
      DecimalFormat q = new DecimalFormat("$#,##0.00");
      DecimalFormat e = new DecimalFormat("#,##0");
      String output = category;
      output += "\nAcctNo/Name: " + acctNumber + " " + name;
      output += "\nPrevious Balance: " +  q.format(prevBalance);
      output += "\nPayment: (" + q.format(payment) + ")"; 
      output += "\nInterest: " + q.format(interest());
      output += "\nNew Purchases: " + q.format(totalPurchases());
      output += "\nCurrent Balance: " + q.format(currentBalance());
      output += "\nMinimum Payment: " + q.format(minPayment());
      output += "\nPurchase Points: " + e.format(purchasePoints()); 
      return output;
   } 
/**
* @return purchasePoints.
*/   
   public abstract int purchasePoints();        
   
}